{"version":3,"sources":["App.js","index.js"],"names":["App","exact","path","component","Films","Film","Starship","useState","films","setFilms","searchResult","setSearchResult","searchString","setSearchString","useEffect","fetch","then","response","json","res","results","onSubmit","event","filter","item","title","includes","preventDefault","type","value","onChange","target","map","film","i","key","to","pathname","state","id","useRouteMatch","url","split","setFilm","opening_crawl","starships","link","ship","setShip","related_films","name","renderShip","ReactDOM","render","document","getElementById"],"mappings":"+NAUe,SAASA,IACtB,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,IACnC,kBAAC,IAAD,CAAOH,KAAK,gBAAgBC,UAAWG,MAM/C,SAASF,IAAS,MAAD,EACWG,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,OAEyBF,mBAAS,IAFlC,mBAERG,EAFQ,KAEMC,EAFN,OAGyBJ,mBAAS,MAHlC,mBAGRK,EAHQ,KAGMC,EAHN,KAIfC,oBAAU,KACRC,MAAM,gCACHC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IAAQV,EAASU,EAAIC,SAAUT,EAAgBQ,EAAIC,YAC1D,IAeH,OACE,6BACE,6BACE,0BAAMC,SAhBUC,IAEpB,IAAIF,EAAUR,EACAJ,EAAMe,OAAQC,GAAiBA,EAAKC,MAAMC,SAASd,IACnDJ,EACdG,EAAgBS,GAChBE,EAAMK,mBAWA,yCAEE,2BAAOC,KAAK,OAAOC,MAAOjB,EAAckB,SAV5BR,IACpBT,EAAgBS,EAAMS,OAAOF,WAWvB,2BAAOD,KAAK,SAASC,MAAM,aAG/B,4BACGnB,EAAasB,IAAI,CAACC,EAAMC,IACvB,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAAME,GAAI,CAAEC,SAAS,SAAD,OAAWH,EAAE,GAAKI,MAAOL,IAASA,EAAKR,WAQvE,SAASpB,IAAQ,IAEXkC,EADUC,cAARC,IACOC,MAAM,KAAK,GAFV,QAGUnC,mBAAS,MAHnB,mBAGP0B,EAHO,KAGDU,EAHC,KASd,OALA7B,oBAAU,KACRC,MAAM,+BAAD,OAAgCwB,EAAhC,MACFvB,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,GAAOwB,EAAQxB,KACtB,IAED,oCACGc,EACC,6BACF,4BAAKA,EAAKR,OACV,6BAAMQ,EAAKW,eACX,6BACE,2BACE,yCAEF,4BACGX,EAAKY,UAAUb,IAAI,CAACc,EAAMZ,IAAM,wBAAIC,IAAKD,GAAG,kBAAC,IAAD,CAAME,GAAE,oBAAeU,EAAKJ,MAAM,KAAK,KAAvC,aAAwDI,EAAKJ,MAAM,KAAK,SAI/G,IAoBhB,SAASpC,IAAY,IAEfiC,EADUC,cAARC,IACOC,MAAM,KAAK,GAFN,QAIMnC,mBAAS,MAJf,mBAIXwC,EAJW,KAILC,EAJK,KAWlB,OANAlC,oBAAU,KACRC,MAAM,mCAAD,OAAoCwB,EAApC,MACFvB,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,GAAO6B,EAAQ7B,KACtB,IAGD,oCACG4B,EA5BaA,KAClB,MAAME,EAAgBF,EAAOA,EAAKvC,MAAQ,GAC1C,OACE,oCACE,4BAAKuC,EAAKG,MACV,sCAEE,4BACGD,EAAcjB,IAAI,CAACc,EAAMZ,IAAM,wBAAIC,IAAKD,GAAG,kBAAC,IAAD,CAAME,GAAE,gBAAWU,EAAKJ,MAAM,KAAK,KAAnC,iBAAoDI,EAAKJ,MAAM,KAAK,WAoB5GS,CAAWJ,GAAO,ICpHhCK,IAASC,OACP,kBAAC,IAAD,KACE,kBAACrD,EAAD,OAEFsD,SAASC,eAAe,W","file":"static/js/main.9e9637d4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport {Switch, Route, Link, useRouteMatch, useLocation} from \"react-router-dom\";\n\nimport \"./styles.css\";\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport default function App() {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\" component={Films} />\n        <Route path=\"/film/:id\" component={Film} />\n        <Route path=\"/starship/:id\" component={Starship}/>\n      </Switch>\n    </>\n  );\n}\n\nfunction Films() {\n  const [films, setFilms] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchString, setSearchString] = useState(null);\n  useEffect(() => {\n    fetch(\"https://swapi.dev/api/films/\")\n      .then(response => response.json())\n      .then(res => {setFilms(res.results); setSearchResult(res.results)});\n  }, []);\n\n  const handleSubmit = (event) => {\n\n    var results = searchString ?\n                  films.filter((item) => {return item.title.includes(searchString)}) :\n                  films;\n    setSearchResult(results);\n    event.preventDefault();\n  }\n\n  const handleChange = (event) => {\n    setSearchString(event.target.value);\n  }\n\n  return (\n    <div>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Search:\n            <input type=\"text\" value={searchString} onChange={handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n      <ul>\n        {searchResult.map((film, i) => (\n          <li key={i}>\n            <Link to={{ pathname: `/film/${i+1}`, state: film }}>{film.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction Film() {\n  let { url } = useRouteMatch();\n  let id = url.split('/')[2];\n  const [film, setFilm] = useState(null);\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/films/${id}/`)\n      .then(response => response.json())\n      .then(res => setFilm(res));\n  }, []);\n  return (\n    <>\n      {film ? (\n        <div>\n      <h3>{film.title}</h3>\n      <div>{film.opening_crawl}</div>\n      <div>\n        <p>\n          <b>Starships</b>\n        </p>\n        <ul>\n          {film.starships.map((link, i) => <li key={i}><Link to={`/starship/${link.split('/')[5]}`}>/starship/{link.split('/')[5]}</Link></li>)}\n        </ul>\n        \n      </div>\n      </div>) : ''}\n    </>\n  );\n}\n\nconst renderShip = (ship) => {\n  const related_films = ship ? ship.films : [];\n  return (\n    <>\n      <h2>{ship.name}</h2>\n      <div>\n        Films:\n        <ul>\n          {related_films.map((link, i) => <li key={i}><Link to={`/film/${link.split('/')[5]}`}>{`/films/${link.split('/')[5]}`}</Link></li>)}\n        </ul>\n      </div>\n  </>\n  )\n}\n\nfunction Starship() {\n  let { url } = useRouteMatch();\n  let id = url.split('/')[2];\n\n  const [ship, setShip] = useState(null);\n  useEffect(() => {\n    fetch(`https://swapi.dev/api/starships/${id}/`)\n      .then(response => response.json())\n      .then(res => setShip(res));\n  }, []);\n  \n  return (\n    <>\n      {ship ? renderShip(ship): ''}\n    </>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from 'react-router-dom';\n\n\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}